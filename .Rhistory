lapply(x, toTree)
} else {
children = lapply(names(x), function(nm) list(name=nm))
}
dt <- FromListSimple(toTree(x), nodeName = "x")
plot(dt)
diagonalNetwork(List = dt)
diagonalNetwork(List = toTree(x))
dt <- FromListSimple(toTree(x), nodeName = "x")
dt
x <- fx
dt <- FromListSimple(toTree(x), nodeName = "x")
dt
x <- fx
depth <- function(x) ifelse(is.list(x), 1 + max(sapply(x, depth)), 0)
toTree <- function(x) {
d <- depth(x)
if(d > 1) {
lapply(x, toTree)
} else {
children = lapply(names(x), function(nm) list(name=nm))
}
dt <- FromListSimple(toTree(x), nodeName = "x")
dt
fx
fx %>% pluck(2)
fx %>% pluck(3)
pluck(fx, 1)
pluck(fx, 1) %>% names()
depth(fx)
modify_depth(fx)
modify_depth(fx, names)
modify_depth(fx, 2,names)
modify_depth(fx, 3,names)
modify_depth(fx, 4,names)
?toTree
library(data.tree)
depth(fx)
View(fx)
pluck(fx, 2)
length(fx)
print(i)
for(i %in% length(fx)){
for(i %in% c(1:length(fx)) ){
length(fx)
for(i in c(1:length(fx)) ){
print(i)
}
for(i in length(fx) ){
print(i)
}
pluck(fx, i) %>% names()
for(i in c(1:length(fx)) ){
pluck(fx, i) %>% names()
}
for(i in c(1:length(fx)) ){
pluck(fx, i) %>% names()
}
fx[1]
fx[1, 2]
fx[1] %>% names( )
fx[1] %>% names()
fx[1][1] %>% names()
fx[1][2] %>% names()
fx[1][3] %>% names()
fx[[2]] %>% names()
fx[[1]] %>% names()
fx[[2]] %>% names()
fx[[3]] %>% names()
fx[[4]] %>% names()
fx[[1]] %>% names()
fx[[2]] %>% names()
fx[[[2]]] %>% names()
for(i in c(1:length(fx)) ){
pluck(fx, i)
}
pluck(fx, 1) %>% names()
for(i in c(1:length(fx)) ){
pluck(fx, i) %>% names()
}
pluck(fx, i) %>% names() %>% print()
for(i in c(1:length(fx)) ){
pluck(fx, i) %>% names() %>% print()
}
Flare
for(i in c(1:length(fx)) ){
pluck(fx, i) %>% names() %>% print()
}
View(Flare)
names(i)
for(i in fx){
names(i)
}
names(i) %>% print()
for(i in fx){
names(i) %>% print()
}
for(i in fx){
depth(i)
}
for(i in fx){
depth(i)
}
for(i in fx){
depth(i) %>% print()
}
myfun <- function(mylist){
dig_deeper <- TRUE
while(dig_deeper){
mylist<- my_list[[1]]
dig_deeper <- is.list(mylist)
}
return(mylist)
}
myfun(fx)
myfun <- function(mylist){
dig_deeper <- TRUE
while(dig_deeper){
mylist <- mylist[[1]]
dig_deeper <- is.list(mylist)
}
return(mylist)
}
myfun(fx)
myfun <- function(my_list){
dig_deeper <- TRUE
while(dig_deeper){
mylist <- my_list[[1]]
dig_deeper <- is.list(mylist)
}
return(mylist)
}
myfun(fx)
fx %>% unlist()
fx %>% unlist() %>% length()
fx %>% unlist() %>% map_dfr(rbind)
fx %>% unlist() %>% map_dfc(bind_cols)
fx %>% map_dfr(rbind)
?pluck()
get_list <- function(x){
while(is.list(x)){
x <- pluck(x, 1)
}
x
}
get_list(fx)
get_list <- function(x){
while(is.list(x)){
x <- pluck(x, 2)
}
x
}
get_list(fx)
get_list <- function(x){
while(is.list(x)){
x <- pluck(x, 1)
}
x
}
get_list(fx)
depth(fx)
vec_depth(fx)
?vec_depth
print(i)
for(i in 1:3){
print(i)
}
get_list <- function(x){
while(is.list(x)){
for(i in 1:length(x)){
xi <- pluck(x, i)
}
xi
}
get_list(fx)
fx %>% unlist() %>% names()
fx %>% unlist() %>% names() %>%
str_split(".")
fx %>% unlist() %>% names() %>%
str_split("\\.")
?gsub
?str_extract
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+")
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.")
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
map()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
map(names())
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
map_dfr(rbind)
depth <- function(x) ifelse(is.list(x), 1 + max(sapply(x, depth)), 0)
toTree <- function(x) {
d <- depth(x)
if(d > 1) {
lapply(x, toTree)
} else {
children = lapply(names(x), function(nm) list(name=nm))
}
dt <- FromListSimple(toTree(x), nodeName = "x")
plot(dt)
x <- list(
id = 1,
status = "active",
coord = list(phi=0, theta=1, r=1),
mt = NULL
)
depth <- function(x) ifelse(is.list(x), 1 + max(sapply(x, depth)), 0)
toTree <- function(x) {
d <- depth(x)
if(d > 1) {
lapply(x, toTree)
} else {
children = lapply(names(x), function(nm) list(name=nm))
}
dt <- FromListSimple(toTree(x), nodeName = "x")
plot(dt)
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.")
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose()
pluck(fx, 1) %>% names()
depth(fx)
vec_depth(fx)
pluck(fx, 2)
length(fx)
fx %>% unlist() %>% length()
get_list <- function(x){
while(is.list(x)){
for(i in 1:length(x)){
xi <- pluck(x, i)
}
xi
}
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose() %>%
as.data.frame()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.") %>%
transpose() %>%
unlist()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
str_split("\\.")
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique()
?treeNetwork
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame()
test_reg <- function(re){
str_view_all("style.border.diagonal.color.theme.Normal", re)
}
test_reg("(?<=.)[:alpha:]")
test_reg("(?<=|\\.)[:alpha:]")
test_reg("(?<=\\.)[:alpha:]")
test_reg("(?<=\\.)[A-Z]+")
test_reg("(?<=\\.)([A-Z])\w+")
test_reg("(?<=\\.)([A-Z])+\w")
test_reg("(?<=\\.)([A-Z])+/w")
test_reg("(?<=\\.)([A-Z])+")
test_reg("(?<=\\.)[A-Z]+")
test_reg("(?<=\\.)\\w")
test_reg("(?<=\\.)\\w+")
test_reg("\\w+.\\w+")
str_extract("\\w+.\\w+", "style.border.diagonal.color.theme.Normal")
str_extract("style.border.diagonal.color.theme.Normal","\\w+.\\w+")
str_extract_all("style.border.diagonal.color.theme.Normal","\\w+.\\w+")
test_reg("\\w+.\\w+")
str_extract_all("style.border.diagonal.color.theme.Normal","\\w+.\\w+")
test_reg("\\w+.\\w+")
?str_extract()
test_reg <- function(re){
str_view_all(
"style.border.diagonal.color.theme.Normal
local.font.strike
local.font.color.indexed", re)
}
test_reg("(?<=\\.)\\w+")
test_reg("\\w+.\\w+")
test_reg(".\\w+.\\w+.")
test_reg("\\w+.\\w+")
test_reg("(?<=\\.)\\w+.\\w+(?=\\.)")
test_reg("\\w+\\.\\w+")
test_reg("(?<=\\.)\\w+\\.\\w+(?=\\.)")
test_reg("\\w+\\.\\w+")
test_reg("(?<=\\.)\\w+\\.\\w+(?=\\.)")
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
filter(. = merge)
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
names()
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
filter(grepl(`.`, local))
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
filter(grepl("local",`.`))
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
filter(grepl("merge",`.`))
fx %>% unlist() %>% names() %>% str_remove_all("[0-9]+") %>%
unique() %>%
data.frame() %>%
filter(grepl("area",`.`))
devtools::install_github("nacnudus/smungs")
library(smungs)
path <- system.file("extdata", "worked-examples.xlsx", package = "unpivotr")
cx.d <- cx %>% filter(sheet == "d.paralle merged cells")
## Value layer
cx.d %>%
unpivotr::pack() %>%
rectify(value = value)
## Formating layer
cx.d %>%
rectify(value = local_format_id)
fx <- list.files("data", ".xlsx", full.names = T) %>%
xlsx_formats()
fx
?read.xlsx
library(openxlsx)
read.xlsx()
?read.xlsx
openXL(list.files("data", ".xlsx", full.names = T))
list.files("data", ".xlsx", full.names = T)
?openXL()
list.files("data", ".xlsx", full.names = T) %>%
openXL()
getwd
getwd()
list.files("data", ".xlsx", full.names = T) %>%
openXL()
openXL("data/Colored Excel.xlsx")
list.files("data", ".xlsx", full.names = T) %>%
loadWorkbook()
wb<- list.files("data", ".xlsx", full.names = T) %>%
loadWorkbook()
wb
wb %>%
class()
getwd()
getStyles(wb)
?loadWorkbook
getStyles(wb)
getStyles(wb)[1]
getStyles(wb) %>% class()
getStylewb
getStyle(wb)
getStyles(wb) %>% map(names)
wbStle <- getStyles(wb)
wbStyle <- getStyles(wb)
wbStle %>% map(names)
wbStyle %>% map(names)
wbSyle %>% names
wbSyle %>% names()
wbStyle <- getStyles(wb)
wbStyle %>% names()
wbStyle %>% map(names)
wbStyle %>% map(function(x) map(x,names))
wbStyle %>% map(x,names)
wbStyle %>% map(names)
wbSyle[1]
wbStyle[1]
wbStyle[[1]]
wbStyle[[1]][1]
wbStyle[[1]]
wbStyle[[2]]
wbStyle[[3]]
wbStyle %>% length
wbStyle %>% depth()
wbStyle %>% vec_depth()
wbStyle %>% depth()
# NOT RUN {
## Create a new workbook
wb <- createWorkbook()
## Add a worksheet
addWorksheet(wb, "Sheet 1")
addWorksheet(wb, "Sheet 2")
## Merge cells: Row 2 column C to F (3:6)
mergeCells(wb, "Sheet 1", cols = 2, rows = 3:6)
## Merge cells:Rows 10 to 20 columns A to J (1:10)
mergeCells(wb, 1, cols = 1:10, rows = 10:20)
## Intersecting merges
mergeCells(wb, 2, cols = 1:10, rows = 1)
mergeCells(wb, 2, cols = 5:10, rows = 2)
mergeCells(wb, 2, cols = c(1, 10), rows = 12) ## equivalent to 1:10 as only min/max are used
## remove merged cells
removeCellMerge(wb, 2, cols = 1, rows = 1) # removes any intersecting merges
mergeCells(wb, 2, cols = 1, rows = 1:10) # Now this works
## Save workbook
# }
# NOT RUN {
saveWorkbook(wb, "data/mergeCellsExample.xlsx", overwrite = TRUE)
??openxlsx
mergeCells
fx
fx %>% flattern
fx %>% flatten()
fx %>% flatten() %>% data.frame
cx %>% rectify
cx.b
cx.c
cx.c %>% rectify
cx.c %>% rectify(value = local_format_id)
fx %>% flatten() %>% data.frame -> ftb
c(12, 13, 14) %in% 1:nrow(ftb)
ftb[1:nrow(ftb) %in% c(12, 13, 14), ]
cx.d %>% rectify
cx.d %>% rectify(value = local_format_id)
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ]
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
transpose()
?transpose
?gather
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
transpose() %>%
pivot_longer()
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
pivot_longer()
?pivot(loger)
?pivot_longer
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ]
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] $>$
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
t()
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
t() %>%
data.frame()
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
t() %>%
data.frame() %>%
View()
fx %>% flatten() %>% data.frame -> ftb
cx.c %>% rectify(value = local_format_id)
cx.d %>% rectify(value = local_format_id)
c(12, 13, 14) %in% 1:nrow(ftb)
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
t() %>%
data.frame() %>%
View()
fx %>% flatten() %>% data.frame -> ftb
cx.c %>% rectify(value = local_format_id)
cx.d %>% rectify(value = local_format_id)
c(12, 13, 14) %in% 1:nrow(ftb)
ftb[1:nrow(ftb) %in% c(12, 13, 14, 25), ] %>%
t() %>%
data.frame()
?notfun
?runif
getwd
getwd()
cx <- list.files("data", "Excel", full.names = T) %>%
xlsx_cells()
cx
cx <- list.files("data", "Excel", full.names = T) %>%
xlsx_cells()
cx <- list.files("data", "Excel", full.names = T) %>%
xlsx_cells()
list.files("data", "Excel", full.names = T) %>%
+     xlsx_cells()
list.files("data", "Excel", full.names = T) %>%
xlsx_cells()
list.files("data", "Excel", full.names = T)
knitr::opts_chunk$set(echo = TRUE)
unlink("Read Excel_cache", recursive = TRUE)
knitr::opts_chunk$set(
fig.path = "README_figs/README-"
)
list.files("data", "Excel", full.names = T)
.libPaths()
paste0(getwd(), "/data/Colored Excel.xlsx")
print(names(all_applicants))
cx <- paste0(getwd(), "/data/Colored Excel.xlsx") |> xlsx_cells()
R.version
R.update
