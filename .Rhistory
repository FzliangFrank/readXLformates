text = 'ElseIf Rge.Interior.Color = RGB(0, 112, 192) Then
ExtractColor = "Blue"
ElseIf Rge.Interior.Color = RGB(255, 192, 0) Then
ExtractColor = "Orange"
ElseIf Rge.Interior.Color = RGB(146, 208, 80) Then
ExtractColor = "Green"
ElseIf Rge.Interior.Color = RGB(146, 101, 76) Then
ExtractColor = "Brown"
ElseIf Rge.Interior.Color = RGB(166, 166, 166) Then
ExtractColor = "Grey"
ElseIf Rge.Interior.Color = RGB(255, 255, 255) Then
ExtractColor = "White"
ElseIf Rge.Interior.Color = RGB(255, 0, 0) Then
ExtractColor = "Red"
ElseIf Rge.Interior.Color = RGB(0, 0, 0) Then
ExtractColor = "Black"
ElseIf Rge.Interior.Color = RGB(255, 255, 0) Then
ExtractColor = "Yellow"
ElseIf Rge.Interior.Color = RGB(112, 48, 160) Then
ExtractColor = "Violet"
ElseIf Rge.Interior.Color = RGB(255, 0, 255) Then
ExtractColor = "Rose"
ElseIf Rge.Interior.Color = RGB(80, 230, 246) Then
ExtractColor = "Turquoise"
'
library(tidyverse)
text %>% gsub("ElseIf Rge.Interior.Color = ")
text %>% gsub("ElseIf Rge.Interior.Color = ", "")
text %>% gsub("ElseIf Rge.Interior.Color = ", "") %>% print()
?gsub()
gsub("ElseIf Rge.Interior.Color =", text, "")
text = 'ElseIf Rge.Interior.Color = RGB(0, 112, 192) Then
ExtractColor = "Blue"
ElseIf Rge.Interior.Color = RGB(255, 192, 0) Then
ExtractColor = "Orange"
ElseIf Rge.Interior.Color = RGB(146, 208, 80) Then
ExtractColor = "Green"
ElseIf Rge.Interior.Color = RGB(146, 101, 76) Then
ExtractColor = "Brown"
ElseIf Rge.Interior.Color = RGB(166, 166, 166) Then
ExtractColor = "Grey"
ElseIf Rge.Interior.Color = RGB(255, 255, 255) Then
ExtractColor = "White"
ElseIf Rge.Interior.Color = RGB(255, 0, 0) Then
ExtractColor = "Red"
ElseIf Rge.Interior.Color = RGB(0, 0, 0) Then
ExtractColor = "Black"
ElseIf Rge.Interior.Color = RGB(255, 255, 0) Then
ExtractColor = "Yellow"
ElseIf Rge.Interior.Color = RGB(112, 48, 160) Then
ExtractColor = "Violet"
ElseIf Rge.Interior.Color = RGB(255, 0, 255) Then
ExtractColor = "Rose"
ElseIf Rge.Interior.Color = RGB(80, 230, 246) Then
ExtractColor = "Turquoise"
'
text
text %>% strsplit("\n")
text %>% strsplit("\n") %>%
gsub("ElseIf Rge.Interior.Color =", "")
text %>% strsplit("\n") %>%
sub("ElseIf Rge.Interior.Color =", "")
text %>% strsplit("\n")
t <- text %>% strsplit("\n")
t
gsub("ElseIf Rge.Interior.Color =", "", t)
t
text
t <- text %>% strsplit("ElseIf")
t
t <- text %>% strsplit("ElseIf ")
t
gsub("ElseIf Rge.Interior.Color = ", "", t)
t
gsub("ElseIf Rge.Interior.Color = ", "", t)
t <- text %>% strsplit("ElseIf ")
t
gsub("Rge.Interior.Color = ", "", t)
t
gsub('\n', "", text)
gsub('\n', "", text) %>% gsub('\', ")
t <- text %>% strsplit("ElseIf ")
t
gsub("Rge.Interior.Color = ", "", t)
gsub('\n', "", text) %>% gsub('\', "")
t <- text %>% strsplit("ElseIf ")
t
gsub("Rge.Interior.Color = ", "", t)
gsub('\n', "", text)
text
print(text)
gsub('\n', "", text)
gsub(c('\n', "\"), "", text)
t <- text %>% strsplit("ElseIf ")
gsub("Rge.Interior.Color = ", "", t)
sub("\n" | "\", "", text)
t <- text %>% strsplit("ElseIf ")
gsub("Rge.Interior.Color = ", "", t)
x <- c("a", "b", "aaaaaaaaaaa")
toString(x)
quote(x)
$t = 'test';
function opposite_eval($t){
$test = 1;
return($$t);
}
$t = 'test'
deparse(substitute(x)
)
?gsub
gsub("hellow world", "hello")
gsub("hellow world", "hellow", "hello")
gsub("hellow", "hello", "hellow world")
devtools::install_github("hadley/emo")
install.packages("RDCOMClient")
library(RDCOMClient)
install.packages("RDCOMClient", repos = "http://www.omegahat.net/R")
library(devtools)
devtools::install_github("omegahat/RDCOMClient")
library(RDCOMClient)
#devtools::install_github("omegahat/RDCOMClient")
install.packages("RDCOMClient",repos="http://www.omegahat.net/R")
library(RDCOMClient)
library(openxlsx)
loadWorkbook("data/Colored Excel.xlsx")
read.xlsx("data/Colored Excel.xlsx")
loadWorkbook("data/Colored Excel.xlsx")
read.xlsx("data/Colored Excel.xlsx")
getwd
getwd()
setwd(rprojroot::find_rstudio_root_file())
library(openxlsx)
setwd("~/Dropbox/Projects/Learning - R general/01 - Read Excel")
library(openxlsx)
loadWorkbook("data/Colored Excel.xlsx")
read.xlsx("data/Colored Excel.xlsx")
getwd()
loadWorkbook("data/Colored Excel.xlsx")
wb <-loadWorkbook("data/Colored Excel.xlsx")
getStyles(wb)
activeSHeet(wb)
activeSheet(wb)
?activeSheet
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
wb <-loadWorkbook("data/Colored Excel.xlsx")
getStyles(wb)
activeSheet(wb)
?openxlsx
getTabke(wb)
getTable(wb)
library(xlsx)
install.packages("xlsx")
getCellRefs(wb)
print(version)
sessionInfo
sessionInfo()
update.packages("xlsx")
update.packages("openxlsx")
sessionInfo()
detach(packages:openxlsx, unload = T)
?detach
detach(package:openxlsx, unload = T)
install.packages("openxlsx")
wb <-loadWorkbook("data/Colored Excel.xlsx")
#install.packages("openxlsx")
library(openxlsx)
wb <-loadWorkbook("data/Colored Excel.xlsx")
getStyles(wb)
library(tidyxl)
install.packages("tidyxl")
library(tidyxl)
tidyxl::xlsx_cells("data/Colored Excel.xlsx")
?tidyxl::xlsx_cells("data/Colored Excel.xlsx")
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1)
devtools::install_github('nacnudus/unpivotr')
packageVersion("snow")
packageVersion("tidyxl")
as_cells(wb)
devtools::install_github('nacnudus/unpivotr')
library(unpivotr)
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1)
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1) %>%
behead()
?behead()
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1) %>%
rectify()
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1) %>%
rectify() %>%
behead()
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1) %>%
rectify() %>%
behead("up-left")
tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1) %>%
rectify() %>%
behead("up", "colors")
cell_token <- tidyxl::xlsx_cells("data/Colored Excel.xlsx", sheets = 1)
cell_token %>%
rectify()
cell_token %>%
hehead("upleft")
cell_token %>%
behead("upleft")
cell_token %>%
behead("up-left")
?rectify()
?as_cells()
as_cells("data/Colored Excel.xlsx")
cell_token %>%
behead("up", "colors")
cell_token
cell_token %>%
splatter()
cell_token %>%
spatter()
?spatter
cell_token %>%
spatter("colors")
?rectify
cell_token %>%
rectify() %>%
slice_head()
cell_token %>%
rectify() %>%
head()
cell_token %>%
rectify() %>%
head(1)
cell_token %>%
rectify() %>%
head(-1)
cell_token %>%
rectify()
cell_token
cell_token %>%
select(row, col, data_type)
library("tidyverse")
cell_token %>%
select(row, col, data_type)
cell_token %>%
select(row, col, data_type, color)
cell_token %>% index()
cell_token %>% names()
cell_token %>%
select(row, col, data_type, style_format)
cell_token %>%
select(row, col, data_type, col)
cell_token %>% names()
cell_token %>%
select(row, col, data_type, character_formatted)
cell_token %>%
select(row, col, data_type, style_format)
cell_token
cell_token %>% View()
View(.[[12]][[3]])
View(.[[12]][[2]])
View(.[[12]][[1]])
cell_token %>%
select(row, col, data_type, local_formate_id)
cell_token %>%
select(row, col, data_type, local_format_id)
cell_token %>%
select(row, col, data_type, local_format_id) %>%
rectify()
cell_token %>%
select(row, col, data_type, local_format_id) %>%
behead("N", data_type)
?behead()
x <- purpose$`up-left left-up`
x
y <- as_cells(x)
cell_token %>%
select(row, col, data_type, local_format_id) %>%
behead("up", "color")
cell_token %>%
select(row, col, data_type, local_format_id) %>%
behead("up", "color") %>%
behead("up", "index")
cell_token %>%
rectify()
?rectify()
cell_token %>%
select(row, col, data_type, local_format_id) %>%
behead("up", "color") %>%
behead("up", "index") %>%
rectify()
cell_token %>%
select(row, col, data_type, local_format_id) %>%
behead("up", "color") %>%
behead("up", "index")
cell_token %>%
rectify(value = local_format_id)
cell_token %>%
rectify(value = c(color, index, local_format_id))
cell_token %>%
rectify(value = c(local_format_id))
names()
cell_token
cell_token %>%
rectify(value = c(character, numeric, local_format_id))
cell_token %>%
rectify(values = c(character, numeric, local_format_id))
